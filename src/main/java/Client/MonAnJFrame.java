/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Client;

import Entity.MonAnInf;
import Entity.LoaiMonInf;
import Entity.MonAn;
import Entity.LoaiMon;
import DTO.MonAnDto;
import DTO.LoaiMonDto;
import DAO.Connect;
import DAO.LoaiMonDao;
import DAO.MonAnDao;
import Image.ImageRenderer;
import com.mysql.cj.jdbc.ConnectionWrapper;
import java.awt.Component;
import java.awt.Image;
import java.awt.List;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.sql.Blob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author phamduc
 */
public class MonAnJFrame extends javax.swing.JFrame   {

    private ArrayList<MonAnDto> list;
    private DefaultTableModel model;
    public static String path2;
     private ArrayList<LoaiMonDto> listCategory;
     public MonAnInf monAnInf;
     public LoaiMonInf loaiMonInf;
    /**
     * Creates new form MainFrame
     */
// Thêm đoạn mã sau trong phương thức khởi tạo của MainFrame
 public MonAnJFrame() throws RemoteException {
    initComponents();
    this.setLocationRelativeTo(null);
    try {
            monAnInf = (MonAnInf) Naming.lookup("rmi://localhost:1617/monAn");
            loaiMonInf= (LoaiMonInf) Naming.lookup("rmi://localhost:1616/loaiMon");
            System.out.println("Connected to RMI Server");
        } catch (Exception ex) {
            ex.printStackTrace();
     }
    list=monAnInf.getAll();
    model= (DefaultTableModel) tableMonAn.getModel();
    
    ArrayList<LoaiMonDto> listTmp= loaiMonInf.getAll();
    
    for(LoaiMonDto a: listTmp){
        
        ComboboxCategory.addItem(a);
        seachByCate.addItem(a);
        
    }
    ComboboxCategory.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                                                          boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof LoaiMon) {
                    LoaiMonDto loaiMon = (LoaiMonDto) value;
                    setText(loaiMon.getName());
                }
                return this;
            }
        });
    seachByCate.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                                                          boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof LoaiMon) {
                    LoaiMonDto loaiMon = (LoaiMonDto) value;
                    setText(loaiMon.getName());
                }
                return this;
            }
        });
    // Sử dụng ImageRenderer cho cột Hình ảnh (cột thứ 3, vị trí 2 trong mãng)
    tableMonAn.getColumnModel().getColumn(3).setCellRenderer(new ImageRenderer());

    showResult();
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        codeJTF = new javax.swing.JTextField();
        nameJTF = new javax.swing.JTextField();
        priceJTF = new javax.swing.JTextField();
        timeJTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMonAn = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        labelImage = new javax.swing.JLabel();
        uploadImage = new javax.swing.JButton();
        ComboboxCategory = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        keyWord = new javax.swing.JTextField();
        buttonSearch = new javax.swing.JButton();
        seachByCate = new javax.swing.JComboBox<>();
        searchByTime = new javax.swing.JComboBox<>();
        codeDelete = new javax.swing.JTextField();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Mã món");

        jLabel2.setText("Tên món");

        jLabel4.setText("Giá đặt");

        jLabel5.setText("Thời gian phục vụ");

        codeJTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeJTFActionPerformed(evt);
            }
        });

        timeJTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeJTFActionPerformed(evt);
            }
        });

        tableMonAn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã món", "Tên món", "Hình ảnh", "Giá đặt (VND)", "Thời gian phục vụ (phút)", "Thể loại"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableMonAn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMonAnMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMonAn);
        if (tableMonAn.getColumnModel().getColumnCount() > 0) {
            tableMonAn.getColumnModel().getColumn(0).setPreferredWidth(25);
            tableMonAn.getColumnModel().getColumn(1).setPreferredWidth(50);
            tableMonAn.getColumnModel().getColumn(4).setPreferredWidth(50);
            tableMonAn.getColumnModel().getColumn(5).setMinWidth(150);
            tableMonAn.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        labelImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 204)));
        labelImage.setPreferredSize(new java.awt.Dimension(170, 130));

        uploadImage.setText("Upload Image");
        uploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImageActionPerformed(evt);
            }
        });

        ComboboxCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ComboboxCategoryMouseClicked(evt);
            }
        });
        ComboboxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboboxCategoryActionPerformed(evt);
            }
        });

        jLabel3.setText("Loại món ăn");

        buttonSearch.setText("Tìm kiếm");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        seachByCate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seachByCateMouseClicked(evt);
            }
        });
        seachByCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seachByCateActionPerformed(evt);
            }
        });

        searchByTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Phục vụ luôn (<1P )", "Nhanh (1<time<15)", "Trên 15p" }));
        searchByTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByTimeActionPerformed(evt);
            }
        });

        delete.setText("Xóa Món với mã");
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMouseClicked(evt);
            }
        });
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboboxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(284, 284, 284))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addGap(64, 64, 64)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(priceJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(uploadImage))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(keyWord, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonSearch))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(codeJTF, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(delete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codeDelete)
                                .addGap(21, 21, 21))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(seachByCate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchByTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSearch)
                    .addComponent(seachByCate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(codeJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(delete)
                            .addComponent(codeDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(priceJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(timeJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboboxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelImage, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(uploadImage)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(jButton2))
                .addGap(16, 16, 16))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codeJTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeJTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codeJTFActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        codeJTF.setText("");
        nameJTF.setText("");
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
    // Lấy thông tin từ các trường nhập liệu
    String code = codeJTF.getText();
    String name = nameJTF.getText();
    
    double price = Double.parseDouble(priceJTF.getText());
    int time = Integer.parseInt(timeJTF.getText());
    

    // Kiểm tra xem món ăn đã tồn tại trong database chưa
    MonAn existingMonAn = new MonAnDao().findByCode(code);

    // Nếu món ăn chưa tồn tại, thì thêm mới
    if (existingMonAn == null) {
        LoaiMonDto seleced=(LoaiMonDto) ComboboxCategory.getSelectedItem();
        MonAnDto newMonAn;
        try {
            monAnInf.save(code, name, price, time,seleced.getCode());
              JOptionPane.showMessageDialog(rootPane,"Thêm món ăn thành công!");
//        try {
//            newMonAn = new MonAn();
//        } catch (RemoteException ex) {
//            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        newMonAn.setCode(code);
//        newMonAn.setName(name);
//        newMonAn.setPrice(price);
//        newMonAn.setTime(time);
//        LoaiMonDto seleced=(LoaiMonDto) ComboboxCategory.getSelectedItem();
        } catch (RemoteException ex) {
            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra!!!");
        }
        
//        try {
//            newMonAn.setCategory(seleced);
//        } catch (RemoteException ex) {
//            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }
    // Nếu món ăn đã tồn tại, thì cập nhật
    else {
        existingMonAn.setName(name);
        existingMonAn.setPrice(price);
        existingMonAn.setTime(time);
        LoaiMonDto seleced= (LoaiMonDto) ComboboxCategory.getSelectedItem();
        try {
            existingMonAn.setCategory(new LoaiMon(seleced.getCode()));
        } catch (RemoteException ex) {
            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (new MonAnDao().updateMenuItem(existingMonAn)) {
            JOptionPane.showMessageDialog(rootPane, "Cập nhật món ăn thành công!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Lỗi khi cập nhật món ăn!");
        }
    }

        try {
            // Hiển thị kết quả
            showResult();
        } catch (RemoteException ex) {
            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void timeJTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeJTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeJTFActionPerformed

    private void uploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImageActionPerformed
        // TODO add your handling code here:
        JFileChooser choose= new JFileChooser();
        choose.showOpenDialog(null);
        File f= choose.getSelectedFile();
        String path= f.getAbsolutePath();
        try{
            BufferedImage bi= ImageIO.read(new File(path));
            Image img= bi.getScaledInstance(170, 130, Image.SCALE_SMOOTH);
            ImageIcon icon= new ImageIcon(img);
            labelImage.setIcon(icon);
            path2=path;
        }catch(IOException ex){
            Logger.getLogger(MonAn.class.getName()).log(Level.SEVERE,null,ex);
        }
    }//GEN-LAST:event_uploadImageActionPerformed

    private void tableMonAnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMonAnMouseClicked
        // TODO add your handling code here:
     
       int r = tableMonAn.getSelectedRow();
       String click= (tableMonAn.getModel().getValueAt(r,1).toString());
//       String sql= "SELECT * FROM food WHERE code='"+ click+"'";
//       System.out.println(sql);
//       
//       
//       try{
//        PreparedStatement ps=  c.getConnection().prepareStatement(sql);
//        ResultSet rs= ps.executeQuery(sql);
//        if(rs.next()){
//            String code= rs.getString("code");
//            String name= rs.getString("name");
//            Double price= rs.getDouble("price");
//            Integer time= rs.getInt("time");
//            Blob image = rs.getBlob("image");
      
            MonAnDto dto = null;
            LoaiMonDto loaiMonDto=null;
        try {
            dto = monAnInf.findByCode(click);
//            Blob image = dto.getBlob("image");
//
//            
//            InputStream inputStream = image.getBinaryStream();
//            BufferedImage bufferedImage = ImageIO.read(inputStream);
//            Image scaledImage = bufferedImage.getScaledInstance(labelImage.getWidth(), labelImage.getHeight(), Image.SCALE_SMOOTH);
//            ImageIcon icon = new ImageIcon(scaledImage);
//            labelImage.setIcon(icon);
        } catch (RemoteException ex) {
            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            String codeLoaiMon= dto.getCategory().getCode();
        try {
            loaiMonDto= loaiMonInf.findByCode(codeLoaiMon);
            System.out.println(loaiMonDto);
            System.out.println(loaiMonDto.getCode());
        } catch (RemoteException ex) {
            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            codeJTF.setText(dto.getCode());
            nameJTF.setText(dto.getName());
            priceJTF.setText(dto.getPrice().toString());
            timeJTF.setText(dto.getTime().toString());
            ComboboxCategory.setSelectedItem(loaiMonDto);
           
           
//        }
//       }catch(Exception e){
//           JOptionPane.showMessageDialog(null, e);
//       }
    }//GEN-LAST:event_tableMonAnMouseClicked

    private void ComboboxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboboxCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboboxCategoryActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        // TODO add your handling code here:
        String keyWord= this.keyWord.getText();
        if(keyWord.equals("")){
            try {
                showResult();
            } catch (RemoteException ex) {
                Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
      if(!keyWord.equals("")){
            try {
                showFindByKey();
            } catch (RemoteException ex) {
                Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
      }
        
        
    }//GEN-LAST:event_buttonSearchActionPerformed

    private void seachByCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seachByCateActionPerformed
        // TODO add your handling code here:
        LoaiMonDto code= (LoaiMonDto) seachByCate.getSelectedItem();
        String tmp= code.getCode();
        System.out.println(tmp);
        try {
            showFindCategory(tmp);
        } catch (RemoteException ex) {
            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_seachByCateActionPerformed

    private void searchByTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByTimeActionPerformed
        // TODO add your handling code here:
        int index= (int) searchByTime.getSelectedIndex();
        
        try {
            showFindTime(index);
        } catch (RemoteException ex) {
            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchByTimeActionPerformed

    private void seachByCateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seachByCateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_seachByCateMouseClicked

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteActionPerformed

    private void deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseClicked
        // TODO add your handling code here:
        String code= codeDelete.getText();
        try {
            monAnInf.delete(code);
            showResult();
        } catch (RemoteException ex) {
            Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_deleteMouseClicked

    private void ComboboxCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ComboboxCategoryMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboboxCategoryMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonAnJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonAnJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonAnJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonAnJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MonAnJFrame().setVisible(true);
                } catch (RemoteException ex) {
                    Logger.getLogger(MonAnJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
   public void showResult() throws RemoteException {
       
        list= monAnInf.getAll();
        int rowCount = model.getRowCount();

    // Xóa tất cả các dòng hiện tại trong bảng
    for (int i = rowCount - 1; i >= 0; i--) {
        model.removeRow(i);
    }

    // Thêm lại dữ liệu từ danh sách vào bảng
    int count = list.size();
    for (int i = 1; i <= count; i++) {
        model.addRow(new Object[]{
                i, list.get(i - 1).getCode(), list.get(i - 1).getName(), list.get(i - 1).getImage(),list.get(i - 1).getPrice(),
            list.get(i - 1).getTime(),list.get(i - 1).getCategory().getCode()
        });
    }
}
    public void showFindByKey() throws RemoteException {
    int rowCount = model.getRowCount();
    list= monAnInf.findByKeyWord(keyWord.getText());

    // Xóa tất cả các dòng hiện tại trong bảng
    for (int i = rowCount - 1; i >= 0; i--) {
        model.removeRow(i);
    }

    // Thêm lại dữ liệu từ danh sách vào bảng
    int count = list.size();
    for (int i = 1; i <= count; i++) {
       
        model.addRow(new Object[]{
                i, list.get(i - 1).getCode(), list.get(i - 1).getName(), list.get(i - 1).getImage(), list.get(i - 1).getPrice(), list.get(i - 1).getTime(),list.get(i - 1).getCategory().getCode()
        });
      }
    
    }
    
    
    public void showFindCategory(String category) throws RemoteException {
    int rowCount = model.getRowCount();
    list= monAnInf.getAllByCategory(category);

    // Xóa tất cả các dòng hiện tại trong bảng
    for (int i = rowCount - 1; i >= 0; i--) {
        model.removeRow(i);
    }

    // Thêm lại dữ liệu từ danh sách vào bảng
    int count = list.size();
    for (int i = 1; i <= count; i++) {
       
        model.addRow(new Object[]{
                i, list.get(i - 1).getCode(), list.get(i - 1).getName(), list.get(i - 1).getImage(), list.get(i - 1).getPrice(), list.get(i - 1).getTime(),list.get(i - 1).getCategory().getCode()
        });
      }
    
    }
     public void showFindTime(int index) throws RemoteException {
         list=monAnInf.getAllByTime(index);
    int rowCount = model.getRowCount();
//    list= new MonAnDao().findByTime(index);

    // Xóa tất cả các dòng hiện tại trong bảng
    for (int i = rowCount - 1; i >= 0; i--) {
        model.removeRow(i);
    }

    // Thêm lại dữ liệu từ danh sách vào bảng
    int count = list.size();
    for (int i = 1; i <= count; i++) {
       
        model.addRow(new Object[]{
                i, list.get(i - 1).getCode(), list.get(i - 1).getName(), list.get(i - 1).getImage(), list.get(i - 1).getPrice(), list.get(i - 1).getTime(),list.get(i - 1).getCategory().getCode()
        });
      }
    
    }


   private javax.swing.JComboBox<LoaiMon> combobox;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<LoaiMonDto> ComboboxCategory;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JTextField codeDelete;
    private javax.swing.JTextField codeJTF;
    private javax.swing.JButton delete;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keyWord;
    private javax.swing.JLabel labelImage;
    private javax.swing.JTextField nameJTF;
    private javax.swing.JTextField priceJTF;
    private javax.swing.JComboBox<LoaiMonDto> seachByCate;
    private javax.swing.JComboBox<String> searchByTime;
    private javax.swing.JTable tableMonAn;
    private javax.swing.JTextField timeJTF;
    private javax.swing.JButton uploadImage;
    // End of variables declaration//GEN-END:variables
}

